eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_loaders_GLTFLoader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three/examples/jsm/loaders/GLTFLoader.js */ \"./node_modules/three/examples/jsm/loaders/GLTFLoader.js\");\n/* harmony import */ var three_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three/examples/jsm/controls/OrbitControls.js */ \"./node_modules/three/examples/jsm/controls/OrbitControls.js\");\n/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! gsap */ \"./node_modules/gsap/index.js\");\n\n\n\n\n\nconst scene = new three__WEBPACK_IMPORTED_MODULE_0__.Scene();\nscene.background = new three__WEBPACK_IMPORTED_MODULE_0__.Color(0xcad8c3); // 🔳 grigio molto scuro\n\nconst camera = new three__WEBPACK_IMPORTED_MODULE_0__.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 100);\ncamera.position.set(0, 2, 5);\n\nconst renderer = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderer({ antialias: true });\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n\nconst controls = new three_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_1__.OrbitControls(camera, renderer.domElement);\ncontrols.update();\n\n// 💡 Luce ambientale (luce diffusa ovunque)\nscene.add(new three__WEBPACK_IMPORTED_MODULE_0__.AmbientLight(0xffffff, 1.2)); // da 0.8 → 1.2\n\n\n// 💡 Luce direzionale principale\nconst directionalLight = new three__WEBPACK_IMPORTED_MODULE_0__.DirectionalLight(0xffffff, 1.5);\ndirectionalLight.position.set(5, 10, 7);\ndirectionalLight.castShadow = true;\nscene.add(directionalLight);\n\n// 💡 Luce emisferica (cielo/terra)\nconst hemisphereLight = new three__WEBPACK_IMPORTED_MODULE_0__.HemisphereLight(0xffffff, 0x444444, 1);\nhemisphereLight.position.set(0, 20, 0);\nscene.add(hemisphereLight);\nlet model;\nconst scompartiAttivi = new Map(); // es: { \"Cassetto1\": Scomparto4 }\nconst cassettiAperti = new Set();\n\n\nconst loader = new three_examples_jsm_loaders_GLTFLoader_js__WEBPACK_IMPORTED_MODULE_2__.GLTFLoader();\nloader.load('model5Cassetti.glb', (gltf) => {\n    model = gltf.scene;\n    // 🔁 Sovrascrive i materiali scuri\n    model.traverse((node) => {\n        if (node.isMesh && node.name === \"Carrello\") {\n            node.material.color.set(0xffffff); // forza bianco puro\n        }\n    });\n    model.position.y += 1; // ⬆️ Alza leggermente il modello\n    model.rotation.y = -Math.PI / 2 - Math.PI / 5; // Rotazione di 45 gradi su X (in radianti)\n    const carrello = model.getObjectByName(\"Cassetto1\");\n    const scomparto = model.getObjectByName(\"Scomparto3\");\n    if (scomparto) {\n        scomparto.traverse(node => {\n            if (node.isMesh && node.material) {\n                node.material.color.set(0xFFFFFF);\n                node.material.metalness = 0.0;         // no metallo\n                node.material.roughness = 0;\n                node.material.needsUpdate = true;\n            }\n        });\n    }\n\n\n    const cassetto2 = model.getObjectByName(\"Cassetto2\");\n    if (cassetto2) {\n        const initialX = cassetto2.position.x; // salva la posizione iniziale\n        //set positionx to initialX -0.1\n        cassetto2.position.x = initialX - 0.01;\n    }\n\n    const cassetto3 = model.getObjectByName(\"Cassetto3\");\n    if (cassetto3) {\n        const initialX = cassetto3.position.x; // salva la posizione iniziale\n        //set positionx to initialX -0.1\n        cassetto3.position.x = initialX - 0.01;\n    }\n\n\n\n\n    scene.add(model);\n    model.traverse(obj => console.log(obj.name));\n}, undefined, err => console.error('Errore GLB', err));\n\n\n// Funzione per aprire un cassetto\nfunction apriCassetto(nomeCassetto) {\n    if (cassettiAperti.has(nomeCassetto)) return; // già aperto, ignora\n\n    const cassetto = model.getObjectByName(nomeCassetto);\n    if (!cassetto) return;\n\n    cassettiAperti.add(nomeCassetto);\n    const initialX = cassetto.position.x;\n\n    gsap__WEBPACK_IMPORTED_MODULE_3__[\"default\"].to(cassetto.position, {\n        x: initialX + 1,\n        duration: 1.0,\n        ease: \"power2.out\"\n    });\n}\nfunction chiudiCassetto(nomeCassetto) {\n    if (!cassettiAperti.has(nomeCassetto)) return; // già chiuso\n\n    const cassetto = model.getObjectByName(nomeCassetto);\n    if (!cassetto) return;\n\n    const initialX = cassetto.userData.initialX ?? (cassetto.userData.initialX = cassetto.position.x - 1);\n\n    gsap__WEBPACK_IMPORTED_MODULE_3__[\"default\"].to(cassetto.position, {\n        x: initialX,\n        duration: 1.0,\n        ease: \"power2.inOut\",\n        onComplete: () => {\n            spegniScompartoAssociato(nomeCassetto);\n            cassettiAperti.delete(nomeCassetto);\n        }\n    });\n}\nwindow.chiudiCassetto = chiudiCassetto;\nwindow.spegniScompartoAssociato = spegniScompartoAssociato;\n\n// Illumina uno scomparto specifico dato cassetto, griglia e colonna\nfunction illuminaScomparto(cassettoId, griglia, colonna) {\n    const nome = `Scomparto${cassettoId}x${griglia}x${colonna}`;\n    const scomparto = model.getObjectByName(nome);\n\n    if (scomparto) {\n        scomparto.traverse(node => {\n            if (node.isMesh && node.material) {\n                node.material = node.material.clone();\n                node.material.color.set(0x00ff00); // verde brillante\n                node.material.needsUpdate = true;\n            }\n        });\n        scompartiAttivi.set(`Cassetto${cassettoId}`, scomparto); // memorizza il riferimento\n    }\n}\nfunction spegniScompartoAssociato(cassetto) {\n    const scomparto = scompartiAttivi.get(cassetto);\n    if (scomparto) {\n        scomparto.traverse(node => {\n            if (node.isMesh && node.material) {\n                node.material.color.set(0xffffff); // torna bianco (o altro colore originale)\n                node.material.needsUpdate = true;\n            }\n        });\n        scompartiAttivi.delete(cassetto);\n    }\n}\n\nwindow.addEventListener('DOMContentLoaded', () => {\n    const controls = document.getElementById('controls');\n    if (controls) {\n        controls.addEventListener('click', (event) => {\n            if (event.target.tagName === 'BUTTON') {\n                const nomeCassetto = event.target.getAttribute('data-cassetto');\n                const id = parseInt(nomeCassetto.replace('Cassetto', ''));\n                apriScomparto(id, 0, 0); // illumina sempre il primo scomparto\n            }\n        });\n    }\n});\n\nwindow.apriCassetto = function (nomeCassetto) {\n    apriCassetto(nomeCassetto);\n};\n\nwindow.apriScomparto = function (cassetto, griglia, colonna) {\n    apriCassetto(`Cassetto${cassetto}`);\n    illuminaScomparto(cassetto, griglia, colonna);\n};\nwindow.addEventListener('resize', () => {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n});\n\nfunction animate() {\n    requestAnimationFrame(animate);\n    controls.update();\n    renderer.render(scene, camera);\n}\nanimate();\n\n\n//# sourceURL=webpack://threejs-webpack-docker/./src/index.js?\n}");
